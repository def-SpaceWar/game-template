import { type Position, type Vector2D, add, scale, subtract, normalize } from "../util/physics";

export class Camera {
    scale: Vector2D = [1, 1];

    constructor(public lerpRate = 4, public pos: Vector2D = [0, 0]) { }

    activate(ctx: CanvasRenderingContext2D) {
        ctx.translate(...this.pos);
        ctx.translate(ctx.canvas.width/2, ctx.canvas.height/2);
        ctx.scale(...this.scale);
    }

    center(dt: number, ...positions: Position[]) {
        const avgPos = scale(positions.reduce((p: Vector2D, {pos}) => add(p, pos), [0, 0]), -1 / positions.length);
        this.pos = add(this.pos, scale(subtract(avgPos, this.pos), dt * this.lerpRate));

        const normal: Vector2D = normalize(subtract(avgPos, this.pos))
        this.scale = normal.map(n => Math.max(Math.abs(n), 1 - Math.abs(n))) as Vector2D;
        console.log(...this.scale);
    }
}
